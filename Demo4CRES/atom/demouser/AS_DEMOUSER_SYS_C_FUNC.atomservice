<?xml version="1.0" encoding="UTF-8"?>
<atom:AtomService xmlns:atom="http://www.hundsun.com/ares/studio/cres/atom/1.0.0" interfaceFlag="" name="AS_DEMOUSER_SYS_C_FUNC" chineseName="AS_演示用户管理_系统提供的内部C函数" description="系统提供的内部C函数" objectId="2100019" database="USERDB" pseudoCode="/********************************************************************&#xA;**&#xA;** [系统提供的内部C函数]&#xA;**   功能：提供内部使用的封装的C函数，并且提供了业务过程中使用的函数&#xA;**   范围：逻辑服务、逻辑函数、原子服务、原子函数&#xA;**   注意：尽量不要使用C语言提供的函数，而采用系统封装的函数，增加系统的容错性&#xA;**&#xA;********************************************************************/&#xA;&#xA;/*==========================================================&#xA;* Function   : isnull&#xA;* Description: 验证字符串是否为空&#xA;* Input      : const char *d_str &#x9;输入字符串&#xA;* Output     :&#xA;* Return     : 0&#x9;&#x9;字符串为空&#xA;*&#x9;&#x9;&#x9;&#x9;1 &#x9;&#x9;字符串不为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;if (isnull(@user_id) == 0)&#xA;{&#xA;}&#xA;&#xA;/*==========================================================&#xA;* Function   : length&#xA;* Description: 取字符串长度&#xA;* &#x9;&#x9;&#x9;    与Oracle的length函数功能类似&#xA;* Input      : char *str &#x9;输入字符串&#xA;* Output     :&#xA;* Return     : >0 &#x9;&#x9;字符串长度&#xA;*&#x9;&#x9;&#x9;&#x9;0&#x9;&#x9;字符串为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;@i = length(@user_id);&#xA;&#xA;/*==========================================================&#xA;* Function  : trim&#xA;* Description:滤去字符串的前后空格,与Oracle的Trim函数功能类似&#xA;* Input     : char *str&#xA;* Output    : char *str&#xA;* Return    : char *str&#xA;* Author    : zhouwm&#xA;* Date      : 2004/08/16&#xA;==========================================================*/&#xA;trim(@user_id);&#xA;&#xA;/*==========================================================&#xA;* Function  : trimb&#xA;* Description:滤去字符串的前后空格,与Oracle的Trim函数功能类似&#xA;*             如果trim后为空则保留一个空格&#xA;* Input     : char *str&#xA;* Output    : char *str&#xA;* Return    : char *str&#xA;* Author    : zhouwm&#xA;* Date      : 2004/08/16&#xA;==========================================================*/&#xA;trimb(@user_id);&#xA;&#xA;/*==========================================================&#xA;* Function   : replace&#xA;* Description: 字符串替换,注意输入目标字符串长度不要太短，以免替换后越界&#xA;* Input      : char&#x9;   *dest   目标串&#xA;*&#x9;&#x9;&#x9;&#x9;const char *src    源字符串&#xA;*&#x9;&#x9;&#x9;&#x9;const char *s_old  旧字符串&#xA;*&#x9;&#x9;&#x9;&#x9;const char *s_new  新字符串&#xA;* Output     :&#xA;* Return     : 0 &#x9;&#x9;成功&#xA;*&#x9;&#x9;&#x9;&#x9;-1&#x9;&#x9;输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;replace(@user_id_t,@user_id,&quot;1&quot;,&quot;2&quot;);&#xA;&#xA;/*==========================================================&#xA;* Function   : ldelchar&#xA;* Description: 前删字符&#xA;* Input      : char&#x9;   *dest     目标串&#xA;*&#x9;&#x9;&#x9;&#x9;const char *src      源字符串&#xA;*&#x9;&#x9;&#x9;&#x9;const char c_char    旧字符&#xA;* Output     :&#xA;* Return     : 0 &#x9;&#x9;成功&#xA;*&#x9;&#x9;&#x9;&#x9;-1&#x9;&#x9;输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/12/29&#xA;==========================================================*/&#xA;ldelchar(@user_id_t,@user_id,'0');&#xA;&#xA;/*==========================================================&#xA;* Function   : rdelchar&#xA;* Description: 后删字符&#xA;* Input      : char&#x9;   *dest     目标串&#xA;*&#x9;&#x9;&#x9;&#x9;const char *src      源字符串&#xA;*&#x9;&#x9;&#x9;&#x9;const char c_char    旧字符&#xA;* Output     :&#xA;* Return     : 0 &#x9;&#x9;成功&#xA;*&#x9;&#x9;&#x9;&#x9;-1&#x9;&#x9;输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/12/29&#xA;==========================================================*/&#xA;rdelchar(@user_id_t,@user_id,'0');&#xA;&#xA;/*==========================================================&#xA;* Function   : rpad&#xA;* Description: 右补字符，与Oracle的rpad函数功能类似&#xA;*              如果字符串小于len值则右补字符c&#xA;* Input      : char *buf 输入字符串&#xA;*              int  len  补字符后的字符串的长度&#xA;*              char c    待补的字符&#xA;* Output     :&#xA;* Return     : char *str&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;rpad(@user_id,10,'0');&#xA;&#xA;/*==========================================================&#xA;* Function   : lpad&#xA;* Description:&#x9;左补字符，与Oracle的lpad函数功能类似,&#xA;* &#x9;&#x9;&#x9;    如果字符串小于len值则左补字符c&#xA;* Input      : char *buf 输入字符串&#xA;*              int&#x9; len  补字符后的字符串的长度&#xA;*              char c    待补的字符&#xA;* Output     :&#xA;* Return     : char *str&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;lpad(@user_id,10,'0');&#xA;&#xA;/*==========================================================&#xA;* Function   : instr&#xA;* Description: 查找字符，与Oracle的instr函数功能类似&#xA;* Input      : const char * src 源字符串&#xA;*              const char  c    待查找字符&#xA;* Output     :&#xA;* Return     : >0      成功&#xA;*              -1      输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;if (instr(@user_id,'1') > 0)&#xA;{&#xA;}&#xA;&#xA;/*==========================================================&#xA;* Function   : substr&#xA;* Description: 从一个字串中的某个起始位置开始得到一个子串&#xA;* Input      : const char *s &#x9;&#x9;源字串&#xA;*&#x9;&#x9;      int&#x9;&#x9; pos&#x9;&#x9;该子串在源字串中的起始位置，从1开始&#xA;*              int        len &#x9;&#x9;要得到的子串的长度&#xA;*&#x9;&#x9;&#x9;  const char *substr&#x9;获得的子串&#xA;* Output     : char *char 子串&#xA;* Return     : 0 &#x9;&#x9;成功&#xA;*&#x9;&#x9;&#x9;&#x9;-1&#x9;&#x9;输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;substr(@user_id,1,3,@user_id_t);&#xA;&#xA;/*==========================================================&#xA;* Function   : subcmp&#xA;* Description: 子串比较&#xA;* Input      : const char *s &#x9;&#x9;源字串&#xA;*&#x9;&#x9;&#x9;  int&#x9;&#x9; pos&#x9;&#x9;该子串在源字串中的起始位置，从1开始&#xA;*              int        len &#x9;&#x9;要得到的子串的长度&#xA;*&#x9;&#x9;&#x9;  const char *substr&#x9;比较得子串&#xA;* Output     :&#xA;* Return     : 0 &#x9;&#x9;成功&#xA;*&#x9;&#x9;&#x9;&#x9;-1&#x9;&#x9;输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/10/12&#xA;==========================================================*/&#xA;if (subcmp(@user_id,1,3,@user_id_t) == 0)&#xA;{&#xA;}&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strstr&#xA;* Description: 查找字符串&#xA;* Input      : const char * src    源字符串&#xA;*              const char * substr 待查找字符串&#xA;* Output     :&#xA;* Return     : >0      成功&#xA;*              -1      输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;if (hs_strstr(@user_id,&quot;124&quot;) > 0)&#xA;{&#xA;}&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strcmp&#xA;* Description: 字符串比较&#xA;* Input      : const char *d_str 字符串&#xA;*&#x9;&#x9;&#x9;  const char *s_str 字符串&#xA;* Output     :&#xA;* Return     : 0 &#x9;&#x9;成功&#xA;*&#x9;&#x9;&#x9;&#x9;-1&#x9;&#x9;输入为空&#xA;*&#x9;&#x9;&#x9;&#x9;&lt;>0&#x9;&#x9;字符不相等&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;if (hs_strcmp(@user_id,@user_id_t) == 0)&#xA;{&#xA;}&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strcat&#xA;* Description: 将一个字串连接到另一个字串后面&#xA;* Input      : char *s_dest 目的字串，连接后结果字串存放的地方&#xA;*&#x9;&#x9;&#x9;&#x9;char *s_src 要连接的字串&#xA;* Output     :&#xA;* Return     : 0 &#x9;&#x9;成功&#xA;*&#x9;&#x9;&#x9;&#x9;-1&#x9;&#x9;输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;hs_strcat(@user_id,@user_id_t);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strcpy&#xA;* Description: 字符串拷贝&#xA;* Input      : char *d_dest 目的字串&#xA;*              char *s_src  源字符串&#xA;* Output     :&#xA;* Return     : 0       成功&#xA;*              -1      输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;hs_strcpy(@user_id,@user_id_t);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strncmp&#xA;* Description: 两个字符指定长度比较&#xA;* Input      : const char *d_str 比较字符串&#xA;*              int        d_len  指定比较长度&#xA;*              const char *s_str 要比较得字符串&#xA;* Output     :&#xA;* Return     : 0       成功&#xA;*              -1      输入为空&#xA;*              &lt;>0     字符不相同&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;if (hs_strncmp(@user_id,3,@user_id_t) == 0)&#xA;{&#xA;}&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strncat&#xA;* Description: 指定长度将一个字串连接到另一个字串后面&#xA;* Input      : char *s_dest       目的字串，连接后结果字串存放的地方&#xA;*              char *s_src        要连接的字串&#xA;*              size_t     count   指定连接长度&#xA;* Output     :&#xA;* Return     : 0       成功&#xA;*              -1      输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;hs_strncat(@user_id,@user_id_t,3);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strncpy&#xA;* Description: 指定长度字符串赋值&#xA;* Input      : const char *s_dest 目的字串&#xA;*              const char *s_src  源字符串&#xA;*              size_t     count   指定复制长度&#xA;* Output     :&#xA;* Return     : 0       成功&#xA;*              -1      输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;hs_strncpy(@user_id,@user_id_t,3);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_memcmp&#xA;* Description: 两个字符比较&#xA;* Input      : const char *d_dest 目的字串&#xA;*              const char *s_src  源字符串&#xA;*              size_t     count   指定比较长度&#xA;* Output     :&#xA;* Return     : 0       成功&#xA;*              -1      输入为空&#xA;*               &lt;>0     字符不相同&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;hs_memcmp(@user_id,@user_id_t,3);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strtolower&#xA;* Description: 字符转换成小写&#xA;* Input      : char *str 字串串&#xA;* Output     :&#xA;* Return     : 0 &#x9;&#x9;成功&#xA;*&#x9;&#x9;&#x9;&#x9;-1&#x9;&#x9;输入为空&#xA;*&#x9;&#x9;&#x9;&#x9;&lt;>0&#x9;&#x9;字符不相同&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;hs_strtolower(@user_id);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strtoupper&#xA;* Description: 字符转换成大写&#xA;* Input      : char *str 字串串&#xA;* Output     :&#xA;* Return     : 0 &#x9;&#x9;成功&#xA;*&#x9;&#x9;&#x9;&#x9;-1&#x9;&#x9;输入为空&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/16&#xA;==========================================================*/&#xA;hs_strtoupper(@user_id);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strlrcpy&#xA;* Description: 字符串左右补字符串&#xA;* Input      : char *str         字符串&#xA;*            : const void *rstr  左补字符串&#xA;*            : const void *rstr  右补字符串&#xA;* Output     :&#xA;* Return     : 0:  成功&#xA;*&#x9;&#x9;&#x9;&#x9;-1: 失败&#xA;* Author     : zhouwm&#xA;* Date       : 2004/10/11&#xA;==========================================================*/&#xA;hs_strlrcpy(@user_id,&quot;1&quot;,&quot;0&quot;);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_datediff&#xA;* Description: 日期间隔天数&#xA;* Input      : int 起始日期,结束日期&#xA;*              特别地 日期不可以小于等于19700101&#xA;* Output     :&#xA;* Return     : 日期间隔天数&#xA;*&#x9;&#x9;&#x9;&#x9;-1&#x9;&#x9;输入日期非法&#xA;* Author     : zhouwm，laisha&#xA;* Date       : 2004/08/19&#xA;==========================================================*/&#xA;if (hs_datediff(@begin_date,@end_date) > 0)&#xA;{&#xA;}&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_datediff&#xA;* Description: 取两个日期的差值&#xA;* Input      : int   pi_begdate     开始日期（格式为：YYYYMMDD）&#xA;*            : int   pi_enddate     结束日期（格式为：YYYYMMDD）&#xA;*            : char *ps_format      比较格式&#xA;*                                   YY: 年&#xA;*                                   QQ: 季度&#xA;*                                   MM: 月&#xA;*                                   WW: 周&#xA;*                                   DD: 日&#xA;* Output     : int                  日期差值&#xA;* Return     : 0                 成功&#xA;*              -1                失败&#xA;* Author     : zhouwm&#xA;* Date       : 2005/10/25&#xA;==========================================================*/&#xA;if (hs_datediff(@begin_date,@end_date,&quot;DD&quot;) > 0)&#xA;{&#xA;}&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_dateadd&#xA;* Description: 增加或减少相应的日期&#xA;* Input      : int begin_date 日期,n 天数,n>0 增加天数,n&lt;0, 减少天数&#xA;*              特别地 日期不可以小于等于19700101&#xA;* Output     :&#xA;* Return     : 日期&#xA;*&#x9;&#x9;&#x9;&#x9;-1&#x9;&#x9;输入日期非法&#xA;* Author     : zhouwm，laisha&#xA;* Date       : 2004/08/19&#xA;==========================================================*/&#xA;@end_date = hs_dateadd(@begin_date,4);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_round&#xA;* Description: 截取浮点数小数点后n位，四舍五入，同oracle中的round&#xA;* Input      : double f 输入浮点数,int n截取位数  n>0&#xA;* Output     :&#xA;* Return     : 截取后的浮点数&#xA;*&#x9;&#x9;&#x9;&#x9;n&lt;0返回输入浮点数&#xA;* Author     : laisha&#xA;* Date       : 2004/08/19&#xA;==========================================================*/&#xA;@occur_balance = hs_round(@entrust_amount * @entrust_price,2);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_trunc&#xA;* Description: 截取浮点数小数点后n位，末位舍去，同oracle中的trunc&#xA;* Input      : double f 输入浮点数,int n截取位数  n>0&#xA;* Output     :&#xA;* Return     : 截取后的浮点数&#xA;*&#x9;&#x9;&#x9;&#x9;n&lt;0返回输入浮点数&#xA;* Author     : laisha&#xA;* Date       : 2004/08/19&#xA;==========================================================*/&#xA;@occur_balance = hs_trunc(@entrust_amount * @entrust_price,2);&#xA;&#xA;/*==========================================================&#xA;* Function   : ltoc&#xA;* Description: 数字转换成字符串&#xA;* Input      : char *buf  转换后字符串&#xA;*              long data  被转换数字&#xA;* Output     :&#xA;* Return     : char* 字符串&#xA;*&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/19&#xA;==========================================================*/&#xA;ltoc(@user_id,@init_date);&#xA;&#xA;/*==========================================================&#xA;* Function   : dtostr&#xA;* Description: 浮点数转换成字符&#xA;* Input      : char&#x9;*buf  转换后字符串&#xA;*              double&#x9;data  被转换浮点数&#xA;* Output     :&#xA;* Return     : char* 字符串&#xA;*&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/19&#xA;==========================================================*/&#xA;dtostr(@user_id,@occur_balance);&#xA;&#xA;/*==========================================================&#xA;* Function   : right&#xA;* Description: 右取字符串&#xA;* Input      : char *p_source_string  原字符串&#xA;*            : int   p_get_length     取原字符串长度&#xA;* Output     : char *p_dest_string    目标字符串&#xA;* Return     : 0                 成功&#xA;*              -1                失败&#xA;*&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/19&#xA;==========================================================*/&#xA;right(@user_id,10,@user_id_t);&#xA;&#xA;/*==========================================================&#xA;* Function   : left&#xA;* Description: 左取字符串&#xA;* Input      : char *p_source_string  原字符串&#xA;*            : int   p_get_length     取原字符串长度&#xA;* Output     : char *p_dest_string    目标字符串&#xA;* Return     : 0                 成功&#xA;*              -1                失败&#xA;* Author     : zhouwm&#xA;* Date       : 2004/10/11&#xA;==========================================================*/&#xA;left(@user_id,10,@user_id_t);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_getdate&#xA;* Description: 取当前日期&#xA;* Input      :&#xA;* Output     : int               当前日期，格式为YYYYMMDD&#xA;* Return     : 0                 成功&#xA;*              -1                失败&#xA;* Author     : zhouwm&#xA;* Date       : 2005/10/25&#xA;==========================================================*/&#xA;@curr_date = hs_getdate();&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_getdatetime&#xA;* Description: 取当前日期&#xA;* Input      : int *pi_date      当前日期，格式为YYYYMMDD&#xA;*              int *pi_time      当期实际，格式为HHMMSS&#xA;* Return     : 0                 成功&#xA;*              -1                失败&#xA;* Author     : zhouwm&#xA;* Date       : 2006/11/17&#xA;==========================================================*/&#xA;hs_getdatetime(&amp;@curr_date,&amp;@curr_time);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_max&#xA;* Description: 取两个整数的最大值&#xA;* Input      : const int i_data1&#xA;*            : const int i_data2&#xA;* Output     :&#xA;* Return     : int 两个整数的最大值&#xA;*&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/19&#xA;==========================================================*/&#xA;@curr_date = hs_max(@begin_date,@end_date);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_max&#xA;* Description: 取两个浮点数的最大值&#xA;* Input      : const double d_data1&#xA;*            : const double d_data2&#xA;* Output     :&#xA;* Return     : double 两个浮点数的最大值&#xA;*&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/19&#xA;==========================================================*/&#xA;@current_amount = hs_max(@begin_amount,@end_amount);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_min&#xA;* Description: 取两个整数的最小值&#xA;* Input      : const int i_data1&#xA;*            : const int i_data2&#xA;* Output     :&#xA;* Return     : int 两个整数的最小值&#xA;*&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/19&#xA;==========================================================*/&#xA;@curr_date = hs_min(@begin_date,@end_date);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_min&#xA;* Description: 取两个浮点数的最小值&#xA;* Input      : const double d_data1&#xA;*            : const double d_data2&#xA;* Output     :&#xA;* Return     : double 两个浮点数的最小值&#xA;*&#xA;* Author     : zhouwm&#xA;* Date       : 2004/08/19&#xA;==========================================================*/&#xA;@current_amount = hs_min(@begin_amount,@end_amount);&#xA;&#xA;/*==========================================================&#xA;* Function   : isnumeric&#xA;* Description: 判断字符串是否为数字&#xA;* Input      : char *str &#x9;输入字符串&#xA;* Output     :&#xA;* Return     : 0 &#x9;字符串为数字&#xA;*&#x9;&#x9;&#x9;&#x9;      1&#x9;&#x9;字符串不为数字&#xA;* Author     : 赖沙&#xA;* Date       : 2007/02/28&#xA;==========================================================*/&#xA;if (isnumeric(@user_id) == 0)&#xA;{&#xA;}&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_subinstr&#xA;* Description: 查找子字符串在源字符串中是否存在，&#xA;*              例如&quot;24&quot;在&quot;1234&quot;中是存在的，或者&quot;2,4&quot;在&quot;1,2,3,4&quot;中也是存在的&#xA;* Input      : char *ps_source   源字符串&#xA;*            : char *ps_subsrc   子字符&#xA;* Output     : char *ps_part     字符串是以什么分割的&#xA;* Return     : > 0               成功&#xA;*              &lt;= 0              失败&#xA;* Author     : zhouwm&#xA;* Date       : 2007/09/29&#xA;==========================================================*/&#xA;if (hs_subinstr(@en_branch_no,@en_branch_no_t,&quot;,&quot;) > 0)&#xA;{&#xA;}&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_snprintf&#xA;* Description: 替换C++中的snprintf以及详细设计里面的sprintf写法&#xA;*              支持最大堆栈为18960，如果超过就会提示超长后进行截取&#xA;* Input      : char *string      赋值的目标字符串&#xA;*            : size_t   count    字符串长度&#xA;*            : const char *format可选便利&#xA;* Output     :&#xA;* Return     : >= 0             成功&#xA;*              &lt; 0              失败&#xA;* Author     : zhouwm&#xA;* Date       : 2007/12/04&#xA;==========================================================*/&#xA;hs_snprintf(v_error_info,CNST_ERRORINFO_LEN, &quot;%s&quot;, &quot;接入许可证不存在&quot;);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strstrsoh&#xA;* Description: 在源字符串中找到子串出现的位置中间第几个间隔符块(,,)&#xA;* Input      : const char *src       输入源字符串&#xA;*&#x9;&#x9;&#x9;  const char *substr&#x9;输入子串&#xA;*&#x9;&#x9;&#x9;  const char soh&#x9;&#x9;间隔符&#xA;* Output     :&#xA;* Return     : -1      源字符串或子串为空。&#xA;*&#x9;&#x9;&#x9;&#x9;-2    在源字符串中找不到子串。&#xA;* example    : 源串: 11,22,33,44,55 子串为33, 分隔符为','，那么返回的结果为3&#xA;* Author     : wangly&#xA;* Date       : 2008/11/23&#xA;==========================================================*/&#xA;@i = hs_strstrsoh(@en_branch_no,&quot;12&quot;,',');&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_strncpysoh&#xA;* Description: 从一个字串中取指定间隔符之前的字符串。&#xA;* Input      : const char *src        源字串&#xA;*              int        sohpos      该子串在源字串中的第几个字串，第一个如果是问隔符则忽略，从1开始&#xA;*              int        maxlen      想要得到子串的最大长度。maxlen需要包括字符串最后一个结束符，即\0。&#xA;*              char *sub  获得的子串&#xA;*&#x9;&#x9;&#x9;  char soh   间隔符。&#xA;* Output     :&#xA;* Return     : 返回子串长度。&#xA;*&#x9;&#x9;&#x9;&#x9;小于0&#xA;*&#x9;&#x9;&#x9;&#x9;-1       输入参数为空或是maxlen和sohpos&lt;=0&#xA;*&#x9;&#x9;&#x9;&#x9;-2&#x9;&#x9;找不到第sohpos个间隔符&#xA;*                -3      找到的子串长度大于maxlen&#xA;*&#x9;&#x9;&#x9;&#x9;-4&#x9;&#x9;用于输出的子串为空。&#xA;*&#xA;*&#xA;* example    : 源串: 11,22,33,44,55 指定位置为2 长度为2 获得的子串为22&#xA;* Author     : wangly&#xA;* Date       : 2008/11/13&#xA;* Modify&#xA;*&#xA;==========================================================*/&#xA;hs_strncpysoh(@en_branch_no,2,2,@en_branch_no_t,',');&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_sohnum&#xA;* Description: 从指定字符串中找有多少个间隔数据块，最后如果不是问隔符也算一个。&#xA;* Input      : const char *src       源字串&#xA;*&#x9;&#x9;&#x9;&#x9;char soh&#x9;间隔符。&#xA;* Output     :&#xA;* Return     : 返回间隔符出现个数。&#xA;*&#x9;&#x9;&#x9;&#x9;0&#x9;&#x9;间隔符没有出现。&#xA;*&#x9;&#x9;&#x9;&#x9;-1       输入参数为空&#xA;*&#xA;*&#xA;* example    : 源串: 11,22,33,44,55 分隔符为','，那么返回的结果为5&#xA;* Author     : wangly&#xA;* Date       : 2008/11/13&#xA;* Modify&#xA;*&#xA;==========================================================*/&#xA;@i = hs_sohnum(@en_branch_no,',');&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_timediff&#xA;* Description: 取两个时间的差值&#xA;* Input      : int   pi_begdate     开始日期（格式为：YYYYMMDD）&#xA;*            : int   pi_begtime     开始时间（格式为：HH24MISS）&#xA;*            : int   pi_enddate     结束日期（格式为：YYYYMMDD）&#xA;*            : int   pi_endtime     结束时间（格式为：HH24MISS）&#xA;*            : char *ps_format      比较格式&#xA;*                                   HH: 返回值以小时为单位&#xA;*                                   MI: 返回值以分钟为单位&#xA;*                                   SS: 返回值以秒为单位&#xA;* Output     : int                  时间差值&#xA;* Return     : >=0                 成功&#xA;*              -1                失败&#xA;* Author     : zhouwm&#xA;* Date       : 2010/07/21&#xA;==========================================================*/&#xA;@i = hs_timediff(@begin_date,@begin_time,@end_date,@end_time,&quot;HH&quot;);&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_validdate&#xA;* Description: 检查日期有效性&#xA;* Input      : int   pi_validdate     日期（格式为：YYYYMMDD）&#xA;* Return     : 0                 成功&#xA;*              -1                失败&#xA;* Author     : zhouwm&#xA;* Date       : 2010/07/21&#xA;==========================================================*/&#xA;if (hs_validdate(@curr_date) == 0)&#xA;{&#xA;}&#xA;&#xA;/*==========================================================&#xA;* Function   : hs_validtime&#xA;* Description: 检查时间有效性&#xA;* Input      : int   pi_validtime     日期（格式为：HH24MISS）&#xA;* Return     : 0                 成功&#xA;*              -1                失败&#xA;* Author     : zhouwm&#xA;* Date       : 2010/07/21&#xA;==========================================================*/&#xA;if (hs_validdate(@curr_time) == 0)&#xA;{&#xA;}&#xA;&#xA;">
  <internalVariables id="user_id_t" name="用户编号" paramType="NON_STD_FIELD" type="HsClientID" flags=""/>
  <internalVariables id="en_branch_no_t" name="允许营业部" paramType="NON_STD_FIELD" type="HsChar2000" flags=""/>
</atom:AtomService>
