<?xml version="1.0" encoding="UTF-8"?>
<atom:AtomService xmlns:atom="http://www.hundsun.com/ares/studio/cres/atom/1.0.0" interfaceFlag="" name="AS_DEMOUSER_PROC_WR_WARNING" chineseName="AS_演示用户管理_原子编写注意要点" description="原子编写注意要点" objectId="2100018" database="USERDB" pseudoCode="/********************************************************************&#xA;**&#xA;** [原子编写注意点]&#xA;**   功能：说明一些代码编写的注意要点，包括代码规范性和错误代码样例&#xA;**   范围：原子服务、原子函数&#xA;**   注意：&#xA;**&#xA;********************************************************************/&#xA;&#xA;/*************************************************************************/&#xA;// 1、《PRO*C块严禁对变量赋值为空》&#xA;//   说明：如果Proc执行报错 Ora-1405 fetch column null 错误基本上由于空值赋值造成，但是编译是不会有问题的，&#xA;//        执行就会有问题&#xA;//&#xA;{&#xA;//// 【错误写法】&#xA;{&#xA;[PRO*C语句块开始]&#xA;@stock_type := substr(@stock_type,instr(@stock_type,',') + 1,1);&#xA;[PRO*C语句块结束]&#xA;}&#xA;//// 【正确写法】&#xA;{&#xA;[PRO*C语句块开始]&#xA;@stock_type := nvl(substr(@stock_type,instr(@stock_type,',')+1,1),' ');&#xA;[PRO*C语句块结束]&#xA;}&#xA;}&#xA;&#xA;/*************************************************************************/&#xA;// 2、《严禁自定义指针变量》&#xA;//   说明：因为如果业务过程中有函数异常退出，就很容易导致内存泄露&#xA;//&#xA;{&#xA;//char*p=new char[1024];&#xA;}&#xA;&#xA;/*************************************************************************/&#xA;// 3、《PRO*C不支持嵌套的Update和Delete操作》&#xA;//   说明：PRO*C引擎相对PL/SQL引擎功能弱点，所以在PL/SQL合法的语法在PRO*C不一定能支持&#xA;//&#xA;{&#xA;//// 【错误写法】&#xA;{&#xA;//[PRO*C语句块开始]&#xA;//  update demoinfo a&#xA;//     set income = income + nvl((select sum(occur_amount*2) from stock b where b.client_id = a.user_id),0)&#xA;//   Where exists(select * from stock b where b.client_id = a.user_id);&#xA;//[PRO*C语句块结束]&#xA;}&#xA;//// 【正确写法】&#xA;{&#xA;//把这个业务操作写到过程中&#xA;}&#xA;}&#xA;&#xA;/*************************************************************************/&#xA;// 4、《sprintf编写要求》&#xA;//   说明：1）sprintf变量对自己的赋值，一定不能在前面增加附加的东西，不然就会造成内存泄漏&#xA;//        2）sprintf前补0操作操作在linux是不支持。&#xA;//&#xA;{&#xA;//// 【错误写法】&#xA;{&#xA;// 变量对自己的赋值不能在前面加任何字符&#xA;sprintf(@remark,&quot;000%s client_id = %s&quot;,@remark,@client_id);&#xA;&#xA;// 字符串前补0在linux是不支持的&#xA;sprintf(@position_str,&quot;%04s&quot;,@bank_no);&#xA;}&#xA;//// 【正确写法】&#xA;{&#xA;// 变量赋值&#xA;sprintf(@remark,&quot;%s client_id = %s&quot;,@remark,@client_id);&#xA;&#xA;// 变量前补0&#xA;hs_strcpy(@position_str,@bank_no);&#xA;lpad(@position_str,'0',4);&#xA;}&#xA;}&#xA;&#xA;/*************************************************************************/&#xA;// 5、《字符串复制编写要求》&#xA;//   说明：尽量不要使用sprintf进行字符串赋值。&#xA;//        因为如果赋值变量存在%等的相关的字符就会导致赋值异常，引起内存混乱。&#xA;//&#xA;{&#xA;//// 【错误写法】&#xA;{&#xA;// 变量对自己的赋值不能在前面加任何字符&#xA;sprintf(@op_station,@op_station_b);&#xA;}&#xA;//// 【正确写法】&#xA;{&#xA;// 变量赋值&#xA;hs_strcpy(@op_station,@op_station_b);&#xA;}&#xA;}&#xA;&#xA;/*************************************************************************/&#xA;// 6、《单字符判断是否为空的方式》&#xA;//   说明：单字符是否为空判断不能判断NULL指针或者’\0’的&#xA;//&#xA;{&#xA;//// 【错误写法】&#xA;{&#xA;if (@child_flag == '\0')&#xA;{&#xA;}&#xA;}&#xA;//// 【正确写法】&#xA;{&#xA;if (@check_type == CNST_CHAR_DEFAULTVALUE)&#xA;{&#xA;}&#xA;}&#xA;}&#xA;&#xA;/*************************************************************************/&#xA;// 7、《浮点数等于0判断方式》&#xA;//   说明：浮点机器本身计算的原因，有可能会有误差的，所以不能直接等于0的&#xA;//&#xA;{&#xA;//// 【错误写法】&#xA;{&#xA;if (@bail_ratio == 0)&#xA;{&#xA;}&#xA;}&#xA;//// 【正确写法】&#xA;{&#xA;if (fabs(@bail_ratio) &lt;= CNST_DOUBLE_ZERO)&#xA;{&#xA;}&#xA;}&#xA;}&#xA;&#xA;/*************************************************************************/&#xA;// 7、《严禁在函数中使用return操作》&#xA;//   说明：因为如果使用了return，会导致函数中很多申明的变量无法释放，导致内存异常&#xA;//&#xA;{&#xA;//// 【错误写法】&#xA;{&#xA;//if (@bkfrozen_serialno != 0)&#xA;//{&#xA;//   return 0;&#xA;//}&#xA;}&#xA;//// 【正确写法】&#xA;{&#xA;//if (@bkfrozen_serialno != 0)&#xA;//{&#xA;//  [中断跳转]&#xA;//}&#xA;}&#xA;}&#xA;&#xA;/*************************************************************************/&#xA;// 8、《严禁在字段采用函数方式判断日期》&#xA;//   说明：此种写法会导致查询用不上索引，同时在oci调用的时候是无法正确判断的，会导致查不到结果，而plsql却可以&#xA;//&#xA;{&#xA;//// 【错误写法】&#xA;{&#xA;sprintf(@sSql,&quot;%s \n %s&quot;,        @sSql,&quot;  and to_date(a.init_date, 'YYYYMMDD') = to_date(sysdate) &quot;);&#xA;}&#xA;//// 【正确写法】&#xA;{&#xA;sprintf(@sSql,&quot;%s \n %s&quot;,        @sSql,&quot;  and a.init_date = to_number(to_char(sysdate,'YYYYMMDD')) &quot;);&#xA;}&#xA;}&#xA;&#xA;/*************************************************************************/&#xA;// 9、《严禁变量日期在一个时间段范围内采用between》&#xA;//   说明：变量日期在一个时间段范围内如果采用between，容易造成无法使用上索引&#xA;//&#xA;{&#xA;//// 【错误写法】&#xA;// select *&#xA;//   from hs_his.hisfund&#xA;//  where @init_date between begin_date and end_date&#xA;&#xA;//// 【正确写法】&#xA;// select *&#xA;//   from hs_his.hisfund&#xA;//  where begin_date &lt;= @init_date&#xA;//    and end_date >= @init_date&#xA;}&#xA;&#xA;/*************************************************************************/&#xA;// 10、《5通用Select结果集返回的严禁使用计算列》&#xA;//   说明：因为对于这种字段oci引擎是无法区分字段类型的所以会统一作为浮点类型处理，返回的长度是字节数的长度4，&#xA;//        这样打包的时候就会导致越界溢出，造成程序奔溃&#xA;//&#xA;{&#xA;//// 【错误写法】&#xA;// [通用select][select 11111 as tot_count from dual]&#xA;&#xA;//// 【正确写法】&#xA;// [通用select][select to_char(11111) as tot_count from dual]&#xA;}&#xA;&#xA;"/>
